{"version":3,"sources":["../src/plugin.js"],"names":["watchAttributes","$plugin","root","document","body","attr","attributes","els","querySelectorAll","watch","clearAttributes","clear","Plugin","$on","event","callback","$modulus","on","args","emit"],"mappings":";;;;;;;;;;AAAA;;;;;AAKA,SAASA,eAAT,CAAyBC,OAAzB,EAAwD;AAAA,MAAtBC,IAAsB,uEAAfC,SAASC,IAAM;;AACtD,OAAI,IAAIC,IAAR,IAAgBJ,QAAQK,UAAxB,EAAoC;AAClC,QAAMC,MAAML,KAAKM,gBAAL,OAA0BH,IAA1B,OAAZ;AACAJ,YAAQK,UAAR,CAAmBD,IAAnB,EAAyBI,KAAzB,CAA+BR,OAA/B,EAAwCM,GAAxC,EAA6CL,IAA7C;AACD;AACF;;AAGD;;;;;AAKA,SAASQ,eAAT,CAAyBT,OAAzB,EAAwD;AAAA,MAAtBC,IAAsB,uEAAfC,SAASC,IAAM;;AACtD,OAAI,IAAIC,IAAR,IAAgBJ,QAAQK,UAAxB,EAAoC;AAClC,QAAMC,MAAML,KAAKM,gBAAL,OAA0BH,IAA1B,OAAZ;AACAJ,YAAQK,UAAR,CAAmBD,IAAnB,EAAyBM,KAAzB,CAA+BV,OAA/B,EAAwCM,GAAxC,EAA6CL,IAA7C;AACD;AACF;;AAGD;;;;IAGqBU,M;AAEnB,oBAAc;AAAA;;AACZ,SAAKN,UAAL,GAAkB,EAAlB;AACD;;AAGD;;;;;;;8BAGU;AAAA;;AACRN,sBAAgB,IAAhB;AACA,WAAKa,GAAL,CAAS,eAAT,EAA0B;AAAA,eAAQH,gBAAgB,KAAhB,EAAsBR,IAAtB,CAAR;AAAA,OAA1B;AACA,WAAKW,GAAL,CAAS,aAAT,EAAwB;AAAA,eAAQb,gBAAgB,KAAhB,EAAsBE,IAAtB,CAAR;AAAA,OAAxB;AACD;;AAGD;;;;;;6BAGS,CAAE;;AAGX;;;;;;;;wBAKIY,K,EAAOC,Q,EAAU;AACnB,WAAKC,QAAL,CAAcC,EAAd,CAAiBH,KAAjB,EAAwB;AAAA,eAAaC,oCAAb;AAAA,OAAxB;AACD;;AAGD;;;;;;;;0BAKMD,K,EAAgB;AAAA;;AAAA,wCAANI,IAAM;AAANA,YAAM;AAAA;;AACpB,wBAAKF,QAAL,EAAcG,IAAd,mBAAmBL,KAAnB,SAA6BI,IAA7B;AACD;;;;;;kBAxCkBN,M","file":"plugin.js","sourcesContent":["/**\r\n * Private method: apply observer to attributes\r\n * @param {Plugin} self \r\n * @param {HTMLElement} root \r\n */\r\nfunction watchAttributes($plugin, root = document.body) {\r\n  for(let attr in $plugin.attributes) {\r\n    const els = root.querySelectorAll(`[${attr}]`)\r\n    $plugin.attributes[attr].watch($plugin, els, root)\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Private method: clear observer to attributes\r\n * @param {Plugin} self \r\n * @param {HTMLElement} root \r\n */\r\nfunction clearAttributes($plugin, root = document.body) {\r\n  for(let attr in $plugin.attributes) {\r\n    const els = root.querySelectorAll(`[${attr}]`)\r\n    $plugin.attributes[attr].clear($plugin, els, root)\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Plugin Class\r\n */\r\nexport default class Plugin {\r\n\r\n  constructor() {\r\n    this.attributes = {}\r\n  }\r\n\r\n  \r\n  /**\r\n   * Setup component before onInit\r\n   */\r\n  onSetup() {\r\n    watchAttributes(this)\r\n    this.$on('dom.destroyed', root => clearAttributes(this, root))\r\n    this.$on('dom.updated', root => watchAttributes(this, root))\r\n  }\r\n\r\n  \r\n  /**\r\n   * Initialize component \r\n   */\r\n  onInit() {}\r\n\r\n\r\n  /**\r\n   * Listen to global event bus\r\n   * @param {String} event \r\n   * @param {Function} callback \r\n   */\r\n  $on(event, callback) {\r\n    this.$modulus.on(event, (...args) => callback(...args))\r\n  }\r\n\r\n\r\n  /**\r\n   * Emit to both global and local event bus\r\n   * @param {String} event \r\n   * @param  {...any} args \r\n   */\r\n  $emit(event, ...args) {\r\n    this.$modulus.emit(event, ...args)\r\n  }\r\n\r\n}"]}