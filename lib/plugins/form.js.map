{"version":3,"sources":["../../src/plugins/form.js"],"names":["Form","forms","listenForms","document","body","querySelectorAll","forEach","watchForm","form","els","checkFormState","addEventListener","setSubmitted","el","event","classList","add","checkState","element","btn","querySelector","blur","value","isInvalid","checkValidity","Plugin"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEqBA,I;;;;;;;;;;;;;AAGnB;;;6BAGS;AACP,WAAKC,KAAL,GAAa,EAAb;AACA,WAAKC,WAAL;AACD;;AAGD;;;;;;kCAGc;AAAA;;AACZ,WAAKD,KAAL,GAAaE,SAASC,IAAT,CAAcC,gBAAd,CAA+B,MAA/B,CAAb;AACA,WAAKJ,KAAL,CAAWK,OAAX,CAAmB;AAAA,eAAQ,OAAKC,SAAL,CAAeC,IAAf,CAAR;AAAA,OAAnB;AACD;;AAGD;;;;;;;8BAIUA,I,EAAM;AAAA;;AAEd,UAAMC,MAAMD,KAAKH,gBAAL,CAAsB,yBAAtB,CAAZ;;AAEA;AACA,WAAKK,cAAL,CAAoBF,IAApB;AACAA,WAAKG,gBAAL,CAAsB,OAAtB,EAA+B,aAAK;AAClC,eAAKC,YAAL,CAAkBJ,IAAlB,EAAwBC,GAAxB;AACA,eAAKC,cAAL,CAAoBF,IAApB;AACD,OAHD;;AAKA;AACAC,UAAIH,OAAJ,CAAY,cAAM;;AAEhB;AACA,SAAC,OAAD,EAAU,MAAV,EAAkBA,OAAlB,CAA0B,iBAAS;AACjCO,aAAGF,gBAAH,CAAoBG,KAApB,EAA2B,aAAK;AAC9BD,eAAGE,SAAH,CAAaC,GAAb,CAAiB,UAAjB;AACAR,iBAAKO,SAAL,CAAeC,GAAf,CAAmB,UAAnB;AACA,mBAAKC,UAAL,CAAgBJ,EAAhB;AACA,mBAAKH,cAAL,CAAoBF,IAApB;AACD,WALD;AAMD,SAPD;;AASA;AACAK,WAAGF,gBAAH,CAAoB,QAApB,EAA8B,aAAK;AACjCE,aAAGE,SAAH,CAAaC,GAAb,CAAiB,UAAjB;AACAR,eAAKO,SAAL,CAAeC,GAAf,CAAmB,UAAnB;AACA,iBAAKC,UAAL,CAAgBJ,EAAhB;AACA,iBAAKH,cAAL,CAAoBF,IAApB;AACD,SALD;;AAOA;AACA,iCAAQ,OAAR,EAAiB,EAAEU,SAASL,EAAX,EAAjB,EAAkC,aAAK;AACrC,iBAAKD,YAAL,CAAkBJ,IAAlB,EAAwBC,GAAxB;AACD,SAFD;;AAIA;AACA,eAAKQ,UAAL,CAAgBJ,EAAhB;AACD,OA3BD;;AA6BA;AACA,UAAMM,MAAMX,KAAKY,aAAL,CAAmB,eAAnB,CAAZ;AACA,UAAGD,GAAH,EAAQA,IAAIR,gBAAJ,CAAqB,OAArB,EAA8B,aAAK;AACzC,eAAKC,YAAL,CAAkBJ,IAAlB,EAAwBC,GAAxB;AACD,OAFO;AAGT;;AAGD;;;;;;;;iCAKaD,I,EAAMC,G,EAAK;AACtBD,WAAKO,SAAL,CAAeC,GAAf,CAAmB,YAAnB;AACAP,UAAIH,OAAJ,CAAY,cAAM;AAChBO,WAAGQ,IAAH;AACAR,WAAGE,SAAH,CAAaC,GAAb,CAAiB,UAAjB;AACD,OAHD;AAID;;AAGD;;;;;;;+BAIWH,E,EAAI;;AAEb;AACAA,SAAGE,SAAH,CAAaF,GAAGS,KAAH,GAAW,QAAX,GAAsB,KAAnC,EAA0C,QAA1C;;AAEA;AACA,UAAMC,YAAY,CAACV,GAAGW,aAAH,EAAnB;AACAX,SAAGE,SAAH,CAAaQ,YAAY,KAAZ,GAAoB,QAAjC,EAA2C,UAA3C;AACD;;AAGD;;;;;;;mCAIef,I,EAAM;AACnB,UAAMe,YAAY,CAACf,KAAKgB,aAAL,EAAnB;AACAhB,WAAKO,SAAL,CAAeQ,YAAY,KAAZ,GAAoB,QAAnC,EAA6C,UAA7C;AACD;;;;EA9G+BE,gB;;kBAAbzB,I","file":"form.js","sourcesContent":["import Plugin from '../plugin'\r\nimport hotkeys from 'hotkeys-js'\r\n\r\nexport default class Form extends Plugin {\r\n\r\n\r\n  /**\r\n   * Build plugin necessities\r\n   */\r\n  onInit() {\r\n    this.forms = []\r\n    this.listenForms()\r\n  }\r\n\r\n\r\n  /**\r\n   * Watch all present forms\r\n   */\r\n  listenForms() {\r\n    this.forms = document.body.querySelectorAll('form')\r\n    this.forms.forEach(form => this.watchForm(form))\r\n  }\r\n\r\n\r\n  /**\r\n   * Watch specific form\r\n   * @param {HTMLElement} form \r\n   */\r\n  watchForm(form) {\r\n    \r\n    const els = form.querySelectorAll('input, textarea, select')\r\n\r\n    // initial form check\r\n    this.checkFormState(form)\r\n    form.addEventListener('reset', e => {\r\n      this.setSubmitted(form, els)\r\n      this.checkFormState(form)\r\n    })\r\n\r\n    // watch children\r\n    els.forEach(el => {\r\n\r\n      // check validity\r\n      ['keyup', 'blur'].forEach(event => {\r\n        el.addEventListener(event, e => {\r\n          el.classList.add('-touched')\r\n          form.classList.add('-touched')\r\n          this.checkState(el)\r\n          this.checkFormState(form)\r\n        })\r\n      })\r\n\r\n      // add -changed when value changes\r\n      el.addEventListener('change', e => {\r\n        el.classList.add('-changed')\r\n        form.classList.add('-changed')\r\n        this.checkState(el)\r\n        this.checkFormState(form)\r\n      })\r\n\r\n      // check submit\r\n      hotkeys('enter', { element: el }, e => {\r\n        this.setSubmitted(form, els)\r\n      })\r\n\r\n      // initial check\r\n      this.checkState(el)\r\n    })\r\n\r\n    // watch submit\r\n    const btn = form.querySelector('[type=submit]')\r\n    if(btn) btn.addEventListener('click', e => {\r\n      this.setSubmitted(form, els)\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Set whol form as submitted\r\n   * @param {HTMLELement} form \r\n   * @param {NodeList} els \r\n   */\r\n  setSubmitted(form, els) {\r\n    form.classList.add('-submitted')\r\n    els.forEach(el => {\r\n      el.blur()\r\n      el.classList.add('-touched')\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Check empty/invalid input state\r\n   * @param {HTMLElement} el \r\n   */\r\n  checkState(el) {\r\n    \r\n    // empty value\r\n    el.classList[el.value ? 'remove' : 'add']('-empty')\r\n\r\n    // invalid value\r\n    const isInvalid = !el.checkValidity()\r\n    el.classList[isInvalid ? 'add' : 'remove']('-invalid')\r\n  }\r\n\r\n\r\n  /**\r\n   * Check invalid form state\r\n   * @param {HTMLElement} form \r\n   */\r\n  checkFormState(form) {\r\n    const isInvalid = !form.checkValidity()\r\n    form.classList[isInvalid ? 'add' : 'remove']('-invalid')\r\n  }\r\n\r\n}"]}