{"version":3,"sources":["../../../src/plugins/storage/web-storage.js"],"names":["WebStorage","storage","toLowerCase","trim","window","sessionStorage","localStorage","parser","clear","key","string","getItem","undefined","JSON","parse","error","object","setItem","stringify","removeItem","Manager"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEqBA,U;;;AACnB,wBAAiC;AAAA,QAArBC,OAAqB,uEAAX,SAAW;;AAAA;;AAAA;;AAE/B,UAAKA,OAAL,GAAeA,QAAQC,WAAR,GAAsBC,IAAtB,EAAf;AAF+B;AAGhC;;AAED;;;;;;;;6BAIS;AACP,UAAI,KAAKF,OAAL,KAAiB,SAArB,EAAgC;AAC9B,eAAOG,OAAOC,cAAd;AACD;AACD,aAAOD,OAAOE,YAAd;AACD;;AAED;;;;;;4BAGQ;AACN,WAAKC,MAAL,GAAcC,KAAd;AACD;;AAED;;;;;;;;wBAKIC,G,EAAK;AACP,UAAMC,SAAS,KAAKH,MAAL,GAAcI,OAAd,CAAsBF,GAAtB,KAA8BG,SAA7C;AACA,UAAI;AACF,eAAOC,KAAKC,KAAL,CAAWJ,MAAX,CAAP;AACD,OAFD,CAEE,OAAOK,KAAP,EAAc;AACd,eAAOL,MAAP;AACD;AACF;;AAED;;;;;;;;wBAKID,G,EAAKO,M,EAAQ;AACf,UAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,aAAKT,MAAL,GAAcU,OAAd,CAAsBR,GAAtB,EAA2BO,MAA3B;AACD,OAFD,MAEO;AACL,aAAKT,MAAL,GAAcU,OAAd,CAAsBR,GAAtB,EAA2BI,KAAKK,SAAL,CAAeF,MAAf,CAA3B;AACD;AACF;;AAED;;;;;;;0BAIMP,G,EAAK;AACT,UAAI;AACF,aAAKF,MAAL,GAAcY,UAAd,CAAyBV,GAAzB;AACD,OAFD,CAEE,OAAOM,KAAP,EAAc;AACd,aAAKR,MAAL,GAAcY,UAAd,CAAyB,EAAzB;AACD;AACF;;;;EA7DqCC,iB;;kBAAnBpB,U","file":"web-storage.js","sourcesContent":["import Manager from './manager'\r\n\r\nexport default class WebStorage extends Manager {\r\n  constructor(storage = 'session') {\r\n    super()\r\n    this.storage = storage.toLowerCase().trim()\r\n  }\r\n\r\n  /**\r\n   * Get storage object\r\n   * @returns {Object} localStorage or sessionStorage\r\n   */\r\n  parser() {\r\n    if (this.storage === 'session') {\r\n      return window.sessionStorage\r\n    }\r\n    return window.localStorage\r\n  }\r\n\r\n  /**\r\n   * Delete all values present in the storage\r\n   */\r\n  clear() {\r\n    this.parser().clear()\r\n  }\r\n\r\n  /**\r\n   * Get an item from its key\r\n   * @param {String} key\r\n   * @returns {Object|String|undefined}\r\n   */\r\n  get(key) {\r\n    const string = this.parser().getItem(key) || undefined\r\n    try {\r\n      return JSON.parse(string)\r\n    } catch (error) {\r\n      return string\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add an item from its key and value\r\n   * @param {String} key\r\n   * @param {*} object\r\n   */\r\n  set(key, object) {\r\n    if (typeof object === 'string') {\r\n      this.parser().setItem(key, object)\r\n    } else {\r\n      this.parser().setItem(key, JSON.stringify(object))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete an item from its key\r\n   * @param {String} key\r\n   */\r\n  unset(key) {\r\n    try {\r\n      this.parser().removeItem(key)\r\n    } catch (error) {\r\n      this.parser().removeItem('')\r\n    }\r\n  }\r\n}"]}