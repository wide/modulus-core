// =============================================================================
// 2# Modulus / Tools / Functions
// =============================================================================

///
/// Converts the given pixel value to its EM quivalent.
///
/// @param  {Number} $size                       - The pixel value to convert.
/// @param  {Number} $context [$browser-context] - The assumed base font size.
/// @return {Number} Scalable pixel value in EMs.
///
@function em($size, $context: $browser-context) {
  @if (type-of($size) == number) {
    @if (unitless($size)) {
      $size: $size * 1px;
    }
    @if (unit($size) != 'px') {
      @error '`#{$size}` needs to be a pixel value.';
    }
  } @else {
    @error '`#{$size}` needs to be a number.';
  }

  @if (type-of($context) == number) {
    @if (unitless($context)) {
      $context: $context * 1px;
    }
    @if (unit($context) != 'px') {
      @error '`#{$context}` needs to be a pixel value.';
    }
  } @else {
    @error '`#{$context}` needs to be a number.';
  }

  @return ($size / $context) * 1em;
}

///
/// Converts the given pixel value to its REM quivalent.
///
/// @param  {Number} $size                       - The pixel value to convert.
/// @param  {Number} $context [$browser-context] - The assumed base font size.
/// @return {Number} Scalable pixel value in REMs.
///
@function rem($size, $context: $browser-context) {
  @if (type-of($size) == number) {
    @if (unitless($size)) {
      $size: $size * 1px;
    }
    @if (unit($size) != 'px') {
      @error '`#{$size}` needs to be a pixel value.';
    }
  } @else {
    @error '`#{$size}` needs to be a number.';
  }

  @if (type-of($context) == number) {
    @if (unitless($context)) {
      $context: $context * 1px;
    }
    @if (unit($context) != 'px') {
      @error '`#{$context}` needs to be a pixel value.';
    }
  } @else {
    @error '`#{$context}` needs to be a number.';
  }

  @return ($size / $context) * 1rem;
}

///
/// Converts a number to a percentage.
///
/// @alias  percentage()
///
/// @param  {Number} $number - The value to convert.
/// @return {Number} A percentage.
///
@function span($number) {
  @return percentage($number);
}

///
/// Checks if a list contains a value(s).
///
/// @link   https://github.com/thoughtbot/bourbon/blob/master/core/bourbon/validators/_contains.scss
///
/// @param  {List} $list   - The list to check against.
/// @param  {List} $values - A single value or list of values to check for.
/// @return {Boolean}
///
/// @access private
///
@function list-contains($list, $values...) {
  @each $value in $values {
    @if type-of(index($list, $value)) != 'number' {
      @return false;
    }
  }

  @return true;
}

///
/// Resolve whether a rule is important or not.
///
/// @param  {Boolean}     $flag - Whether a rule is important (TRUE) or not (FALSE).
/// @return {String|Null} Returns `!important` or NULL.
///
@function important($flag: false) {
  @if ($flag == true) {
    @return !important;
  } @else if ($flag == false) {
    @return null;
  } @else {
    @error '`#{$flag}` needs to be `true` or `false`.';
  }
}

///
/// Return null rather than throwing an error if index is outside list range.
///
/// @param  {List}        $list  - The list to check against.
/// @param  {Number}      $index - A index of values to check for.
/// @return {String|Null} Returns item or NULL.
///
/// @access private
///
@function nth-or-null($list, $index) {
  @return if(length($list) >= $index, nth($list, $index), null);
}

///
/// Implode a list into a string.
///
/// @param  {List}      $list - The list of strings to implode.
/// @param  {String}    $glue - The "glue" between elements in the result string.
/// @return {String}    The result string.
///
@function implode($list, $glue: ' ') {
  $result: null;
  $length: length($list);

  @for $i from 1 through $length {
    $e: nth($list, $i);
    @if $i == $length {
      $result: unquote("#{$result}#{$e}");
    }
    @else {
      $result: unquote("#{$result}#{$e}#{$glue}");
    }
  }

  @return $result;
}